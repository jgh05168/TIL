'''
A : 정렬할 대상 리스트
l : 왼쪽 인덱스
r : 오른쪽 인덱스

'''

def partition(A, l, r):
    # 피봇 정하기(제일 왼쪽 값으로)
    p = A[l]

    # 피봇보다 작은 것은 왼쪽부터, 큰 부분은 오른쪽부터 놓기
    i, j = l, r
    # i : 왼쪽에 있으면 안되는 원소의 위치를 찾는 인덱스
    # j : 오른쪽에 있으면 안되는 원소의 위치를 찾는 인덱스

    while i <= j:
        # 피봇보다 큰 값을 왼쪽부터 찾기 시작
        while i <= j and A[i] <= p:     # 교차가 되지 않았거나, 피봇보다 값이 작을 경우
            # i 번째 위치에 있는 원소가 피봇보다 작으면, 오른쪽으로 한 칸 이동
            i += 1
        while i <= j and A[j] >= p:
            # j 번째 위치에 있는 원소가 피봇보다 크면, 왼쪽으로 한 칸 이동
            j -= 1

        # i 가 j보다 작으면 위치가 잘못된 두 원소를 찾음
        if i < j:
            # 잘못된 원소들 자리를 교환
            A[i], A[j] = A[j], A[i]
    
    # 반복이 끝나면 작은값봐 큰 값이 모두 제자리에 위치한다.
    # 피봇의 위치를 정해준다.
    A[l], A[j] = A[j], A[l]

    # 정렬이 끝난 피봇의 위치를 반환
    return j


def quickSort(A, l, r):
    # 분할하고 피봇의 위치를 구한다.
    if l < r:
        s = partition(A, l, r)
        # s를 제외한 왼쪽 부분
        quickSort(A, l, s - 1)
        # s를 제외한 오른쪽 부분
        quickSort(A, s + 1, r)

li = [11, 45, 23, 81, 28, 34]
quickSort(li, 0, len(li) - 1)
print(li)


